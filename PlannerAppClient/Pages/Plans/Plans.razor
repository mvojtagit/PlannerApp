@page "/plans"
@page "/plans/{pagenumber:int}"

@attribute [Authorize]


@inject PlansService planService
@inject NavigationManager navMan

@if (string.IsNullOrWhiteSpace(Query))
{
    <h2>My Plans Page: @PageNumber</h2>
}
else
{
    <h2>My Plans Results for: @Query - Page: @PageNumber</h2>
}

<div class="row">
    <RadzenTextBox Placeholder="SerachQuery" @bind-Value="@Query" /><RadzenButton Text="Search" Click="async ()=> await GetAllPlansAsync()"></RadzenButton>
</div>
<hr />

@if (isBusy)
{
    <div class="loader"><img src="Loader.gif" /></div>

}
else if (plans.Count == 0)
{
    <h2>No plans to show...</h2>
}
else
{
    <div class="row">

        @foreach (var item in plans)
        {
            <div class="col-4">
                <RadzenCard>
                    <img src="@item.CoverPath" style="width:90%;margin:5px" />
                    <h2><a href="/plans/details/@item.Id">@item.Title</a></h2>
                    <p>@item.Description</p>
                    <hr />
                    <div class="row">
                        <div class="col-6">
                            <RadzenButton Text="Edit" ButtonStyle="Radzen.ButtonStyle.Success" class="btn-block" Click="()=>NavigateToPlanById(item.Id)"></RadzenButton>
                        </div>
                        <div class="col-6">
                            <RadzenButton Text="Delete" ButtonStyle="Radzen.ButtonStyle.Danger" class="btn-block" Click="()=>SelectPlan(item.Id)"></RadzenButton>
                        </div>
                    </div>
                    @if (strSelectedPlanId == item.Id)
                    {
                        <div class="row">
                            <div class="col-12">
                                <RadzenButton Text="Confirm"
                                              ButtonStyle="Radzen.ButtonStyle.Danger"
                                              Click="async ()=> await DeletePlanByIdAsync(item.Id)"
                                              class="btn-block" Style="margin:5px"></RadzenButton>
                            </div>

                        </div>
                    }

                </RadzenCard>
            </div>
        }

    </div>
}



<hr />

@if (plans.Count > 0)
{
    <div class="row">

        @for (int i = 1; i <= iTotalPages; i++)
        {
            int iPage = i;

            if (iPage == PageNumber)
            {
                <RadzenButton Text="@i.ToString()" ButtonStyle="Radzen.ButtonStyle.Info" Click="async () => await GetPageAsync(iPage)" Style="margin:8px" Disabled="true"></RadzenButton>
            }
            else
            {
                <RadzenButton Text="@i.ToString()" ButtonStyle="Radzen.ButtonStyle.Info" Click="async () => await GetPageAsync(iPage)" Style="margin:8px"></RadzenButton>
            }

        }

    </div>
}




@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    string strSelectedPlanId = string.Empty;

    private bool isBusy = true;

    private List<Plan> plans = new List<Plan>();

    private int iTotalPages = 1;

    private async Task GetAllPlansAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;


        if (PageNumber == null)
        {
            PageNumber = 1;
        }

        planService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        PlanCollectionPagingResponse response;

        if (string.IsNullOrWhiteSpace(Query))
        {
            response = await planService.GetAllPlansByPageAsync(PageNumber);
        }
        else
        {
            response = await planService.SearchPlansByPageAsync(Query, PageNumber);
        }



        if (response.Count % response.PageSize == 0)
        {
            iTotalPages = (response.Count / response.PageSize);
        }
        else
        {
            iTotalPages = (response.Count / response.PageSize) + 1;
        }

        plans = response.Records.ToList();

        isBusy = false;
    }

    private async Task GetPageAsync(int iPage)
    {
        PageNumber = iPage;
        await GetAllPlansAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllPlansAsync();

    }

    private void SelectPlan(string strId)
    {
        strSelectedPlanId = strId;
    }


    private void NavigateToPlanById(string strId)
    {
        navMan.NavigateTo($"/plans/details/{strId}");
    }

    private async Task DeletePlanByIdAsync(string strID)
    {
        isBusy = true;

        var response = await planService.DeletePlanByIdAsync(strID);

        if (response.IsSuccess)
        {
            var deletedPlan = plans.SingleOrDefault(p => p.Id == strSelectedPlanId);
            plans.Remove(deletedPlan);
        }
        else
        {
            await GetAllPlansAsync();
        }

        isBusy = false;

    }


}
